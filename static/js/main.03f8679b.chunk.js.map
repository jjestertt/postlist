{"version":3,"sources":["components/PostsList/PostList.module.css","components/AddPostForm/AddPostForm.module.css","reportWebVitals.js","components/UI/Preloader/Preloader.jsx","components/PostsList/PostListItem/PostListItem.jsx","components/AddPostForm/AddPostForm.jsx","components/PostsList/PostsList.jsx","containers/PostsContainer.jsx","components/Header/Header.jsx","components/Footer/Footer.jsx","components/PostDetails/PostDetails.jsx","components/PostComments/PostComment/PostComment.jsx","components/PostComments/PostComments.jsx","containers/PostDetailsContainer.jsx","layout/Layout.jsx","index.js"],"names":["module","exports","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Preloader","className","id","PostListItem","props","useState","isEdit","setEdit","history","useHistory","editPostForm","useFormik","initialValues","title","body","onSubmit","values","changePostHandler","handleSubmit","type","required","getFieldProps","rows","onClick","push","deletePostHandler","AddPostForm","showAddPost","toggleShowAddPost","addPostHandler","addPost","useRef","useEffect","addPostForm","style","AddPost","ref","height","current","scrollHeight","htmlFor","PostsList","renderPosts","AddPostLink","length","PostsContainer","isFetch","setIsFetch","postsData","setPostsData","alert","a","axios","delete","newPostData","filter","post","error","console","put","newPostsData","map","response","data","Header","to","Footer","PostDetails","PostComment","index","postId","text","deleteCommentHandler","changeCommentHandler","resetForm","PostComments","commentsData","addCommentHandler","addCommentForm","renderComment","comment","placeholder","PostDetailsContainer","setCommentsData","useParams","get","getPostComments","newCommentsData","newCommentData","currentPost","Layout","useAlert","getPostsData","role","path","render","exact","options","timeout","position","positions","BOTTOM_CENTER","ReactDOM","StrictMode","template","AlertTemplate","document","getElementById"],"mappings":"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","file":"static/js/main.03f8679b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"AddPostLink\":\"PostList_AddPostLink__swlCy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"AddPost\":\"AddPostForm_AddPost__1SjeM\"};","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport './Preloader.css';\n\nexport default function Preloader(){\n    return (\n        <div className=\"floatingCirclesGContainer\">\n            <div id=\"floatingCirclesG\">\n                <div className=\"f_circleG\" id=\"frotateG_01\"/>\n                <div className=\"f_circleG\" id=\"frotateG_02\"/>\n                <div className=\"f_circleG\" id=\"frotateG_03\"/>\n                <div className=\"f_circleG\" id=\"frotateG_04\"/>\n                <div className=\"f_circleG\" id=\"frotateG_05\"/>\n                <div className=\"f_circleG\" id=\"frotateG_06\"/>\n                <div className=\"f_circleG\" id=\"frotateG_07\"/>\n                <div className=\"f_circleG\" id=\"frotateG_08\"/>\n            </div>\n        </div>\n\n    );\n}","import {useState} from \"react\";\nimport {useFormik} from \"formik\";\nimport {useHistory} from \"react-router-dom\";\n\nexport default function PostListItem(props) {\n    const [isEdit, setEdit] = useState(); // переключатель редактирования формы\n    const history = useHistory();\n\n    //Стейт формы редактирования поста\n    const editPostForm = useFormik({\n        initialValues: {\n            title: props.title,\n            body: props.body,\n        },\n        onSubmit: (values) => {\n            props.changePostHandler(props.id, values.title, values.body);\n            setEdit(false);\n        }\n    });\n\n    /**\n     * Редирект на страницу деталей поста\n     */\n    const showPostDetails = () => {\n        history.push(`/posts/${props.id}`);\n    }\n\n    return (\n        <div className=\"col-md-6 col-lg-4\">\n            <div className=\"card mb-4 shadow-sm\">\n                <div className=\"card-body\">\n                    {\n                        isEdit\n                            ? <form onSubmit={editPostForm.handleSubmit}>\n                                <input type=\"text\" className=\"form-control mb-4\" required={true}\n                                       {...editPostForm.getFieldProps('title')}\n                                />\n                                <textarea className=\"form-control mb-3\" rows=\"5\" required={true}\n                                          {...editPostForm.getFieldProps('body')}\n                                />\n                            </form>\n                            : <>\n                                <h5 className=\"card-title\">{props.title}</h5>\n                                <p className=\"card-text\">{props.body}</p>\n                            </>\n                    }\n\n                    <div className=\"d-flex justify-content-between align-items-center\">\n                        <div className=\"btn-group\">\n                            <button onClick={showPostDetails} type=\"button\" className=\"btn btn-sm btn-outline-success\">Открыть\n                            </button>\n                            {\n                                isEdit\n                                    ?<button type=\"button\" className=\"btn btn-sm btn-outline-success\"\n                                                  onClick={editPostForm.handleSubmit}>\n                                            Сохранить\n                                    </button>\n                                    :<button type=\"button\" className=\"btn btn-sm btn-outline-primary\"\n                                             onClick={() => {setEdit(true)}}>\n                                            Изменить\n                                    </button>\n                            }\n                        </div>\n                        <button type=\"button\" className=\"btn btn-sm btn-outline-danger float-right\"\n                                onClick={() => {props.deletePostHandler(props.id)}}>\n                            <i className=\"fa fa-trash-alt\"></i>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}","import React, {useEffect, useRef} from \"react\";\nimport style from \"./AddPostForm.module.css\";\nimport {useFormik} from \"formik\";\n\nexport default function AddPostForm({showAddPost, toggleShowAddPost, addPostHandler}) {\n    // Реф и инлайновые стили нужны для того чтобы посчитать высоту окна для плавного выезжания формы\n    const addPost = useRef();\n\n    useEffect(\n        () => {\n            /**\n             * При размонтировании компонента переменная showAddPost должна стать false\n             * Это поможет избежать ошибки когда открыто окно дрбавления поста, и мы захотим удалить\n             * пост который уже есть.\n             */\n            return () => {\n                toggleShowAddPost(false);\n            }\n        },[]\n    );\n\n    //Стейт формы добавления поста\n    const addPostForm = useFormik({\n        initialValues:{\n            title: '',\n            body: ''\n        },\n        onSubmit: (values) => {\n            addPostHandler(values.title, values.body);\n            toggleShowAddPost(false);\n        }\n    });\n\n    return (\n        <div className={\"row \" + style.AddPost} ref={addPost}\n             style={{\n                 height: (showAddPost\n                     ? addPost.current.scrollHeight + \"px\"\n                     : \"0px\")\n             }}>\n            <div className=\"col\">\n                <form onSubmit={addPostForm.handleSubmit}>\n                    <legend>Добавить новый пост</legend>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"title\">Название</label>\n                        <input type=\"text\" id=\"title\" className=\"form-control\" required={true}\n                               {...addPostForm.getFieldProps('title')}\n                        />\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"body\">Текст поста</label>\n                        <textarea type=\"text\" id=\"body\" className=\"form-control\" required={true}\n                                  {...addPostForm.getFieldProps('body')}\n                        />\n                    </div>\n                    <button type=\"submit\" className=\"btn btn-sm btn-success mr-2\">Добавить</button>\n                    <button type=\"button\" onClick={()=>{toggleShowAddPost(false)}}\n                            className=\"btn btn-sm btn-outline-primary\">Закрыть\n                    </button>\n                </form>\n            </div>\n        </div>\n    );\n}","import React from \"react\";\nimport style from \"./PostList.module.css\";\nimport AddPostForm from \"../AddPostForm/AddPostForm\";\n\nexport default function PostsList({renderPosts, showAddPost, toggleShowAddPost, addPostHandler}) {\n\n    return (\n        <>\n            <AddPostForm\n                showAddPost={showAddPost}\n                toggleShowAddPost={toggleShowAddPost}\n                addPostHandler={addPostHandler}\n            />\n            <h2 className=\"mt-3 d-inline-block mr-2\">Все посты</h2>\n            <span className={\"text-secondary \" + style.AddPostLink}\n                  onClick={() => {toggleShowAddPost(!showAddPost)}}\n            >\n                Добавить пост\n            </span>\n            <div className=\"album py-5\">\n                <div className=\"container\">\n                    <div className=\"row\">\n                        {renderPosts.length === 0\n                            ? <h5>В данный момент постов нет</h5>\n                            : renderPosts\n                        }\n                    </div>\n                </div>\n            </div>\n        </>\n    );\n}","import React from \"react\";\nimport {useState} from \"react\";\nimport axios from \"axios\";\nimport Preloader from \"../components/UI/Preloader/Preloader\";\nimport PostListItem from \"../components/PostsList/PostListItem/PostListItem\";\nimport PostsList from \"../components/PostsList/PostsList\";\n\n\nexport default function PostsContainer({isFetch, setIsFetch, postsData, setPostsData, alert}) {\n    const [showAddPost, toggleShowAddPost] = useState(false); //Показать окно добавления поста\n\n    //Не загружаем страницу пока нет данных о постах\n    if (!postsData) {\n        return null;\n    }\n\n    /**\n     * Функция принимает на вход id поста, отправляет запрос на сервер на его удаление\n     * и в случае успешного овета удаляет пост на фронтенде\n     * @param id {number}\n     */\n    const deletePostHandler = async (id) => {\n        setIsFetch(true);\n        try {\n            await axios.delete(`https://my-json-server.typicode.com/jjestertt/fakeposts/posts/${id}`);\n            const newPostData = postsData.filter(post => post.id !== id);\n            setPostsData(newPostData);\n        } catch (e) {\n            alert.error(\"Ошибка удаления поста\");\n            console.error(e);\n        } finally {\n            setIsFetch(false);\n        }\n    }\n\n    /**\n     * Функция принимает на вход id поста, отправляет запрос на сервер на его изменение\n     * и в случае успешного овета изменяет пост на фронтенде\n     * @param id {number}\n     * @param title {string}\n     * @param body {string}\n     */\n    const changePostHandler = async (id, title, body) => {\n        setIsFetch(true);\n        try {\n            await axios.put(`https://my-json-server.typicode.com/jjestertt/fakeposts/posts/${id}`,\n                    {id, title, body});\n\n            const newPostsData = postsData.map(post => {\n                if (post.id === id){\n                    return {id, title, body}\n                }\n                return post;\n            });\n            setPostsData(newPostsData);\n        } catch (e) {\n            alert.error(\"Ошибка изменения поста\");\n            console.error(e);\n        } finally {\n            setIsFetch(false);\n        }\n    }\n\n    /**\n     * Функция отправляет запрос на сервер на добавление поста,\n     * в случае успешного ответа добавляет пост на фронтенде\n     * @param title {string}\n     * @param body  {string}\n     */\n    const addPostHandler = async (title, body) => {\n        setIsFetch(true);\n        try {\n            const response = await axios.post(`https://my-json-server.typicode.com/jjestertt/fakeposts/posts/`,\n                {title, body});\n            const newPostsData = [...postsData, response.data];\n            setPostsData(newPostsData);\n        } catch (e) {\n            alert.error(\"Ошибка добавления поста\");\n            console.error(e);\n        } finally {\n            setIsFetch(false);\n        }\n    }\n    //Преобразуем массив с постами в массив с jsx\n    const renderPosts = postsData.map(post => (\n        <PostListItem key={post.id} id={post.id}\n                      title={post.title} body={post.body}\n                      deletePostHandler={deletePostHandler}\n                      changePostHandler={changePostHandler}\n        />\n    ));\n\n    // Если происходит загрузка чего либо, крутим прелоадер\n    if (isFetch) {\n        return <Preloader/>;\n    }\n\n    return (\n        <PostsList renderPosts={renderPosts}\n                   showAddPost={showAddPost}\n                   toggleShowAddPost={toggleShowAddPost}\n                   addPostHandler={addPostHandler}\n        />\n    );\n}","import React from \"react\";\nimport {NavLink} from \"react-router-dom\";\n\nexport default function Header(){\n    return (\n        <header className=\"mb-3\">\n            <nav className=\"navbar navbar-expand-md navbar-light bg-light\">\n                <NavLink to='/' className=\"navbar-brand\">На главную</NavLink>\n            </nav>\n        </header>\n    );\n}","import React from \"react\";\n\nexport default function Footer(){\n    return(\n        <footer className=\"footer mt-auto py-3\">\n            <div className=\"container\">\n                <span className=\"text-muted\">Sivak Maxim</span>\n            </div>\n        </footer>\n    );\n}","import React from \"react\";\n\n\nconst PostDetails = ({title, body}) => {\n    return (\n        <>\n            <div className=\"jumbotron\">\n                <h1 className=\"display-4\">{title}</h1>\n                <p className=\"lead\">{body}</p>\n            </div>\n        </>\n    );\n}\n\nexport default PostDetails;","import React, {useState} from \"react\";\nimport {useFormik} from \"formik\";\n\nexport default function PostComment({index, id, postId, text, deleteCommentHandler, changeCommentHandler}) {\n    const [isEdit, setEdit] = useState(false);\n\n    /**\n     * Стейт формы редактирования поста\n     */\n    const editPostForm = useFormik({\n        initialValues: {\n            text: text\n        },\n        onSubmit: values => {\n            changeCommentHandler(id, values.text, postId);\n        }\n    });\n\n    /**\n     * При закрытии формы редактирования поста сбрасываем ее состояние в начальное\n     */\n    const onCloseForm = () =>{\n        editPostForm.resetForm();\n        setEdit(false);\n    }\n\n    return (\n        <li className=\"media mb-4 w-100\">\n            <div className=\"comment w-100\">\n                <div className=\"media-body\">\n                    <h6>Комментарий {index + 1}</h6>\n                    {isEdit\n                        ? <>\n                            <form className=\"w-100\" onSubmit={editPostForm.handleSubmit}>\n                                <textarea className=\"form-control mb-2\"\n                                          {...editPostForm.getFieldProps('text')}\n                                />\n                                <button type=\"submit\" className=\"btn btn-sm btn-outline-success mr-1\">Сохранить</button>\n                                <button onClick={onCloseForm}\n                                        className=\"btn btn-sm btn-outline-secondary \">Отмена\n                                </button>\n                            </form>\n                        </>\n                        :<>\n                            <p className=\"mb-1\">\n                                {text}\n                            </p>\n                            <button onClick={() => setEdit(true)}\n                                    className=\"btn btn-sm btn-outline-secondary mr-1\">\n                                Редактировать\n                            </button>\n                            <button onClick={() => {deleteCommentHandler(id)}}\n                                    className=\"btn btn-sm btn-outline-danger\">\n                                Удалить\n                            </button>\n                        </>\n                    }\n\n                </div>\n            </div>\n        </li>\n    );\n}","import React from \"react\";\nimport PostComment from \"./PostComment/PostComment\";\nimport {useFormik} from \"formik\";\n\nexport default function PostComments({commentsData, addCommentHandler, postId, deleteCommentHandler, changeCommentHandler}) {\n    // Стейт формы добавления комментария\n    const addCommentForm = useFormik({\n        initialValues: {\n            text: \"\",\n        },\n        onSubmit : values => {\n            addCommentHandler(postId ,values.text);\n        }\n    });\n\n    /**\n     *  На основе массива коментариев делаем массив с готовым jsx\n     */\n    const renderComment = commentsData.map((comment, index) => {\n        return (\n            <PostComment key={comment.id} index={index} id={comment.id} postId={comment.postId} text={comment.text}\n                         deleteCommentHandler={deleteCommentHandler} changeCommentHandler={changeCommentHandler}\n            />\n        );\n    });\n\n    return (\n        <div className=\"container\">\n            <div className=\"row\">\n                <div className=\"col-md-12\">\n                    <div className=\"panel panel-info\">\n                        <div className=\"panel-heading\">\n                            Комментарии\n                        </div>\n                        <div className=\"panel-body comments\">\n                            <form onSubmit={addCommentForm.handleSubmit}>\n                                <textarea className=\"form-control mb-3\" placeholder=\"Оставьте Ваш комментарий\"\n                                          rows=\"3\" {...addCommentForm.getFieldProps('text')}\n                                />\n                                <button type=\"submit\" className=\"btn btn-success pull-right\">Отправить</button>\n                            </form>\n                            <hr className=\"mb-3\"/>\n                            <ul className=\"media-list\">\n                                {renderComment.length === 0\n                                    ? <span className=\"text-secondary\">Комментариев пока нет</span>\n                                    : renderComment\n                                }\n                            </ul>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}","import React, {useEffect, useState} from \"react\";\nimport {useParams} from \"react-router-dom\";\nimport PostDetails from \"../components/PostDetails/PostDetails\";\nimport Preloader from \"../components/UI/Preloader/Preloader\";\nimport PostComments from \"../components/PostComments/PostComments\";\nimport axios from \"axios\";\n\n\nconst PostDetailsContainer = ({postsData, isFetch, setIsFetch, alert}) => {\n    const [commentsData, setCommentsData] = useState(null); //{id: number,postId: number,text: string,}\n    const {id} = useParams(); // id поста вычисляемое из адрессной строки\n\n    useEffect(() => {\n    /**\n     * Отправляем запрос на сервер и получаем список коментариев для конкретного поста\n     * Пост возьмем с фронтенда для того чтобы не нагружать сервер лишними запросами\n     * Так же можно взять список постов с сервера но в данном случае при фейковом сервере\n     * если мы создадим пост и кликнем на него упадет ошибка.\n     * */\n        const getPostComments = async () => {\n            setIsFetch(true);\n            try{\n                const response = await axios.get(`https://my-json-server.typicode.com/jjestertt/fakeposts/comments?postId=${id}`);\n                setCommentsData(response.data);\n            }catch (e) {\n                alert.error(\"Ошибка получения коментариев\");\n                console.error(e);\n            }finally {\n                setIsFetch(false);\n            }\n\n        }\n        getPostComments();\n    }, []);\n\n    //Не загружаем страницу пока нет данных о постах и коментариях\n    if (!postsData || !commentsData) {\n        return null;\n    }\n\n\n    /**\n     * Функция отправляет запрос на сервер на добавление комментария к определенному,\n     * в случае успешного ответа добавляет комментарий на фронтенде\n     * @param postId {number, string}\n     * @param text {string}\n     */\n    const addCommentHandler = async (postId, text) => {\n        setIsFetch(true);\n        try{\n            const response = await axios\n                .post(\"https://my-json-server.typicode.com/jjestertt/fakeposts/comments\", {\n                    text, postId});\n            const newCommentsData = [...commentsData, response.data];\n            setCommentsData(newCommentsData);\n        }catch (e) {\n            alert.error(\"Ошибка добавления коментария\");\n            console.error(e);\n        } finally {\n            setIsFetch(false);\n        }\n    }\n\n    /**\n     * Функция принимает на вход id комментария, отправляет запрос на сервер на его удаление\n     * и в случае успешного овета удаляет пост на фронтенде\n     * @param id {number}\n     */\n    const deleteCommentHandler = async (id) => {\n        setIsFetch(true);\n        try {\n            await axios.delete(`https://my-json-server.typicode.com/jjestertt/fakeposts/comments/${id}`);\n            const newCommentData = commentsData.filter(comment => comment.id !== id);\n            setCommentsData(newCommentData);\n        } catch (e) {\n            alert.error(\"Ошибка удаления коментария\")\n            console.error(e);\n        } finally {\n            setIsFetch(false);\n        }\n    }\n\n    /**\n     * Функция принимает на вход id комментария, отправляет запрос на сервер на его изменение\n     * и в случае успешного овета изменяет комментарий на фронтенде\n     * @param id {number, string} Номер комментария\n     * @param text {string} Текст комментария\n     * @param postId {number} Номер поста\n     */\n    const changeCommentHandler = async (id, text, postId) => {\n        setIsFetch(true);\n        try {\n            await axios.put(`https://my-json-server.typicode.com/jjestertt/fakeposts/comments/${id}`,\n                {id, text, postId});\n            const newCommentsData = commentsData.map(comment => {\n                if (comment.id === id){\n                    return {id, text, postId}\n                }\n                return comment;\n            });\n            setCommentsData(newCommentsData);\n        } catch (e) {\n            alert.error(\"Ошибка изменения коментария\")\n            console.error(e);\n        } finally {\n            setIsFetch(false);\n        }\n    }\n\n    //Текщий пост это первый эллемент массива постов отфильтрованного по id приходящему из params.\n    const currentPost = postsData.filter(post => post.id === +id)[0];\n\n    // Если происходит загрузка чего либо, крутим прелоадер\n    if (isFetch) {\n        return <Preloader/>;\n    }\n\n    return (\n        <>\n            <PostDetails title={currentPost.title} body={currentPost.body}/>\n            <PostComments postId={id}\n                          commentsData={commentsData}\n                          addCommentHandler={addCommentHandler}\n                          deleteCommentHandler={deleteCommentHandler}\n                          changeCommentHandler={changeCommentHandler}\n            />\n        </>\n    );\n}\n\nexport default PostDetailsContainer;","import React, {useEffect, useState} from \"react\";\nimport {Redirect, Route} from \"react-router-dom\";\nimport PostsContainer from \"../containers/PostsContainer\";\nimport Header from \"../components/Header/Header\";\nimport Footer from \"../components/Footer/Footer\";\nimport PostDetailsContainer from \"../containers/PostDetailsContainer\";\nimport axios from \"axios\";\nimport {useAlert} from \"react-alert\";\n\nexport default function Layout() {\n    const alert = useAlert(); // Обработчик ошибок\n    const [isFetch, setIsFetch] = useState(true); //Процесс загрузки\n    const [postsData, setPostsData] = useState(null); //Данные о постах{id: number, title: string, body: string}\n\n\n    useEffect(() => {\n        /**\n         * Функция отправляет запрос на сервер и получает данные о постах\n         */\n        const getPostsData = async () => {\n            setIsFetch(true);\n            try {\n                const response = await axios.get('https://my-json-server.typicode.com/jjestertt/fakeposts/posts');\n                setPostsData(response.data);\n            } catch (e) {\n                alert.error(\"Ошибка получения постов\");\n                console.error(e);\n            } finally {\n                setIsFetch(false);\n            }\n        }\n        getPostsData();\n    }, [])\n\n    return (\n        <>\n            <Header/>\n            <main role=\"main\" className=\"flex-shrink-0\">\n                <div className=\"container\">\n                    <Route path=\"/posts/:id\" render={() => (\n                        <PostDetailsContainer alert={alert}\n                            isFetch={isFetch} setIsFetch={setIsFetch}\n                            postsData={postsData}\n                        />\n                    )}/>\n                    <Route exact={true} path=\"/posts\" render={() => (\n                        <PostsContainer alert={alert}\n                            isFetch={isFetch} setIsFetch={setIsFetch}\n                            postsData={postsData} setPostsData={setPostsData}\n                        />\n                    )}/>\n                    <Route exact={true} path=\"/\" render={() => <Redirect to='/posts'/>}/>\n                </div>\n            </main>\n            <Footer/>\n        </>\n\n\n    );\n}","import 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {HashRouter} from 'react-router-dom'\nimport reportWebVitals from './reportWebVitals';\nimport Layout from \"./layout/Layout\";\nimport {positions, Provider} from \"react-alert\";\nimport AlertTemplate from \"react-alert-template-basic\";\n\n//Настройки отображения обработчика ошибок\nconst options = {\n    timeout: 3000,\n    position: positions.BOTTOM_CENTER\n};\n\nReactDOM.render(\n    <React.StrictMode>\n        <HashRouter>\n            <Provider template={AlertTemplate} {...options}>\n                <Layout/>\n            </Provider>\n        </HashRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}